// Copyright 2020 Sogou Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package sogou.speech.ns.v1;

import "google/rpc/status.proto";
import "google/protobuf/timestamp.proto";

option cc_enable_arenas = true;
option csharp_namespace = "Sogou.Speech.NS.V1";
option go_package = "golang.speech.sogou.com/apis/ns/v1;ns";
option java_multiple_files = true;
option java_outer_classname = "NSProto";
option java_package = "com.sogou.speech.ns.v1";
option objc_class_prefix = "SPBNS";
option php_namespace = "Sogou\\Speech\\NS\\V1";
option swift_prefix = "SPBNS";

// Noise-Suppressor
service ns {
    rpc StreamingSuppress(stream StreamingSuppressRequest) returns (stream StreamingSuppressResponse);
}


// The top-level message sent by the client for the `StreamingSuppress` method.
// Multiple `StreamingSuppressRequest` messages are sent.
// The first message must contain a `streaming_config` message and must not contain `audio_content` data.
// All subsequent messages must contain `audio_content` data and must NOT contain a
// `streaming_config` message.
message StreamingSuppressRequest {

    // *Required* The streaming request, which is either a streaming config or audio content.
    oneof streaming_request {
        // Provides information to the suppressor that specifies how to process the
        // request. The first `StreamingSuppressRequest` message must contain a
        // `streaming_config`  message.
        StreamingSuppressionConfig streaming_config = 1;

        // The audio data to be suppressed. Sequential chunks of audio data are sent
        // in sequential `StreamingSuppressRequest` messages. The first
        // `StreamingSuppressRequest` message must not contain `audio_content` data
        // and all subsequent `StreamingSuppressRequest` messages must contain
        // `audio_content` data.
        bytes audio_content = 2;
    }

    // *Optional* The sequence number of the request
    // It must be specified through all streaming requests including the config request
    // incremented by one each time, ** STARTING FROM 0 **
    uint64 request_sequence = 3;

    // *Optional* The timestamp when the request will be sending
    google.protobuf.Timestamp request_time = 4;
}

// Provides information to the suppressor that specifies how to process the
// request.
message StreamingSuppressionConfig {

    // *Required* Provides information to the suppressor that specifies how to
    // process the request.
    SuppressionConfig config = 1;

    // *Optional* If non-zero value specified, the audio_content of each
    // `StreamingSuppressionResult` in `StreamingSuppressResponse` will guaranteed to be
    // the specified bytes, except the last one.
    int32 audio_content_bytes_of_each_response = 3;
}


// Provides information to the suppressor that specifies how to process the
// request.
message SuppressionConfig {

    // Audio encoding of the data sent in the audio message. All encodings support
    // only 1 channel (mono) audio.
    enum AudioEncoding {
        // Not specified. Will return result status equal to http 400 Bad Request.
        ENCODING_UNSPECIFIED = 0;

        // Uncompressed 16-bit signed little-endian samples (Linear PCM).
        // `sample_rate_hertz` must be 16000.
        LINEAR16 = 1;

        // To be Extended
        // ...
    }

    // *Required* Encoding of audio data sent IN all suppression request messages.
    AudioEncoding encoding_in = 1;

    // *Required* Expected encoding of audio data FROM all suppression response messages.
    AudioEncoding encoding_out = 2;

    // *Optional* Which model to select for the given request. Select the model
    // best suited to your domain to get best results. If a model is not
    // explicitly specified, "default" model is used.
    string model = 3;

    // *Optional* Obfuscated ID of request, to identify number of unique requests using the service.
    string uid = 4;

}

// `StreamingSuppressResponse` is the only message returned to the client by
// `StreamingSuppress`. A series of zero or more `StreamingSuppressResponse`
// messages are streamed back to the client.
// Suppressed audio slice will be filled in each response.
message StreamingSuppressResponse {

    // *Output-only* If set, returns a [google.rpc.Status] message that
    // specifies the error for the operation.
    // NOTICE: this field is used for websocket / http2-multipart-stream protocol
    // to return error on the end of the response stream.
    // gRPC protocol will NEVER use it, it will return error status directly from method instead.
    google.rpc.Status error = 2;

    // *Output-only* This repeated list contains zero or more results that
    // correspond to consecutive portions of the audio currently being processed.
    repeated StreamingSuppressionResult results = 1;
}


// A streaming suppression result corresponding to a portion of the audio
// that is currently being processed.
message StreamingSuppressionResult {
    // *Output-only* a portion of the audio that is currently being processed.
    // It will be the encoding specified by corresponding request config.
    bytes audio_content = 1;

    // *Optional* The sequence number of the response
    // It must be specified through all streaming results
    // incremented by one each time, ** STARTING FROM 1 **
    uint64 response_sequence = 3;

    // *Optional* The timestamp when the response will be sending
    google.protobuf.Timestamp response_time = 4;
}
